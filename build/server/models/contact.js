// Generated by CoffeeScript 1.8.0
var Contact, ContactLog, americano, fs, log;

americano = require('americano-cozy');

ContactLog = require('./contact_log');

fs = require('fs');

log = require('printit')({
  prefix: 'Contact Model'
});

module.exports = Contact = americano.getModel('Contact', {
  id: String,
  fn: String,
  n: String,
  datapoints: function(x) {
    return x;
  },
  note: String,
  tags: function(x) {
    return x;
  },
  _attachments: Object
});

Contact.afterInitialize = function() {
  if ((this.n == null) || this.n === '') {
    if (this.fn == null) {
      this.fn = '';
    }
    this.n = this.getParsedN();
  } else if ((this.fn == null) || this.fn === '') {
    this.fn = this.getComputedFN();
  }
  return this;
};

Contact.prototype.remoteKeys = function() {
  var dp, model, out, _i, _len, _ref, _ref1;
  model = this.toJSON();
  out = [this.id];
  _ref = model.datapoints;
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    dp = _ref[_i];
    if (dp.name === 'tel') {
      out.push(ContactLog.normalizeNumber(dp.value));
    } else if (dp.name === 'email') {
      out.push((_ref1 = dp.value) != null ? _ref1.toLowerCase() : void 0);
    }
  }
  return out;
};

Contact.prototype.savePicture = function(path, callback) {
  var data;
  data = {
    name: 'picture'
  };
  log.debug(path);
  return this.attachFile(path, data, function(err) {
    if (err) {
      return callback(err);
    } else {
      return fs.unlink(path, function(err) {
        if (err) {
          log.error("failed to purge " + file.path);
        }
        return callback();
      });
    }
  });
};

Contact.prototype.getComputedFN = function() {
  var familly, given, middle, parts, prefix, suffix, _ref;
  _ref = this.n.split(';'), familly = _ref[0], given = _ref[1], middle = _ref[2], prefix = _ref[3], suffix = _ref[4];
  parts = [prefix, given, middle, familly, suffix];
  parts = parts.filter(function(part) {
    return (part != null) && part !== '';
  });
  return parts.join(' ');
};

Contact.prototype.getParsedN = function() {
  return ";" + this.fn + ";;;";
};

Contact.prototype.toVCF = function(callback) {
  var buffers, getVCardOutput, model, stream, _ref;
  model = this.toJSON();
  getVCardOutput = (function(_this) {
    return function(picture) {
      var content, dp, folded, i, key, out, type, value, _ref;
      if (picture == null) {
        picture = null;
      }
      out = "BEGIN:VCARD\n";
      out += "VERSION:3.0\n";
      if (model.note) {
        out += "NOTE:" + model.note + "\n";
      }
      if (model.n) {
        out += "N:" + model.n + "\n";
        out += "FN:" + (_this.getComputedFN()) + "\n";
      } else if (model.fn) {
        out += "N:" + (_this.getParsedN()) + "\n";
        out += "FN:" + model.fn + "\n";
      } else {
        out += "N:;;;;\n";
        out += "FN:\n";
      }
      _ref = model.datapoints;
      for (i in _ref) {
        dp = _ref[i];
        value = dp.value;
        key = dp.name.toUpperCase();
        switch (key) {
          case 'ABOUT':
            if (dp.type === 'org' || dp.type === 'title') {
              out += "" + (dp.type.toUpperCase()) + ":" + value + "\n";
            } else {
              out += "X-" + (dp.type.toUpperCase()) + ":" + value + "\n";
            }
            break;
          case 'OTHER':
            out += "X-" + (dp.type.toUpperCase()) + ":" + value + "\n";
            break;
          case 'ADR':
            value = value.replace(/(\r\n|\n\r|\r|\n)/g, ";");
            content = "TYPE=home,postal:;;" + value + ";;;;";
            out += "ADR;" + content + "\n";
            break;
          default:
            if (dp.type != null) {
              type = ";TYPE=" + (dp.type.toUpperCase());
            } else {
              type = "";
            }
            out += "" + key + type + ":" + value + "\n";
        }
      }
      if (picture != null) {
        folded = picture.match(/.{1,75}/g).join('\n ');
        out += "PHOTO;ENCODING=B;TYPE=JPEG;VALUE=BINARY:\n " + folded + "\n";
      }
      return out += "END:VCARD\n";
    };
  })(this);
  if (((_ref = model._attachments) != null ? _ref.picture : void 0) != null) {
    buffers = [];
    stream = this.getFile('picture', function() {});
    stream.on('data', buffers.push.bind(buffers));
    return stream.on('end', function() {
      var picture;
      picture = Buffer.concat(buffers).toString('base64');
      return callback(null, getVCardOutput(picture));
    });
  } else {
    return callback(null, getVCardOutput());
  }
};
