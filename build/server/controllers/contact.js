// Generated by CoffeeScript 1.8.0
var Contact, Task, Todolist, async, multiparty, path;

path = require('path');

multiparty = require('multiparty');

async = require('async');

Contact = require('../models/contact');

Todolist = require('../models/todolist');

Task = require('../models/task');

module.exports = {
  fetch: function(req, res, next, id) {
    return Contact.find(id, function(err, contact) {
      if (err) {
        return res.error(500, 'An error occured', err);
      }
      if (!contact) {
        return res.error(404, 'Contact not found');
      }
      req.contact = contact;
      return next();
    });
  },
  list: function(req, res) {
    return Contact.request('all', function(err, contacts) {
      if (err) {
        return res.error(500, 'An error occured', err);
      }
      return res.send(contacts);
    });
  },
  create: function(req, res) {
    var create, dp, model, name, toCreate, _i, _len, _ref;
    model = req.body.contact ? JSON.parse(req.body.contact) : req.body;
    toCreate = new Contact(model);
    create = function() {
      return Contact.create(toCreate, function(err, contact) {
        if (err) {
          return next(err);
        } else {
          return res.send(contact, 201);
        }
      });
    };
    if (model["import"]) {
      name = '';
      if ((toCreate.fn != null) && toCreate.fn.length > 0) {
        name = toCreate.fn;
      } else if (toCreate.n && toCreate.n.length > 0) {
        name = toCreate.n.split(';').join(' ').trim();
      } else {
        _ref = toCreate.datapoints;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          dp = _ref[_i];
          if (dp.name === 'email') {
            name = dp.value;
          }
        }
      }
      return Contact.request('byName', {
        key: name
      }, function(err, contacts) {
        if (contacts.length === 0) {
          return create();
        } else {
          return res.send(contacts[0], 201);
        }
      });
    } else {
      return create();
    }
  },
  read: function(req, res) {
    return res.send(req.contact);
  },
  update: function(req, res) {
    var model;
    model = req.body.contact ? JSON.parse(req.body.contact) : req.body;
    return req.contact.updateAttributes(model, function(err) {
      if (err) {
        return res.error(500, "Update failed.", err);
      } else {
        return res.send(req.contact, 201);
      }
    });
  },
  updatePicture: function(req, res, next) {
    var form;
    form = new multiparty.Form();
    return form.parse(req, function(err, fields, files) {
      var file;
      if (err) {
        return next(err);
      } else if ((files != null) && (files.picture != null) && files.picture.length > 0) {
        file = files.picture[0];
        return req.contact.savePicture(file.path, function(err) {
          if (err) {
            return next(err);
          } else {
            return res.send(req.contact, 201);
          }
        });
      } else {
        return next(new Error('Can\'t change picture, no file is attached.'));
      }
    });
  },
  "delete": function(req, res) {
    return req.contact.destroy(function(err) {
      if (err) {
        return res.error(500, "Deletion failed.", err);
      }
      return res.send("Deletion succeded.", 204);
    });
  },
  picture: function(req, res, next) {
    var stream, _ref;
    if ((_ref = req.contact._attachments) != null ? _ref.picture : void 0) {
      stream = req.contact.getFile('picture', function(err) {
        if (err) {
          return next(err);
        }
      });
      return stream.pipe(res);
    } else {
      return res.sendfile(path.resolve(__dirname, '../assets/defaultpicture.png'));
    }
  },
  vCard: function(req, res, next) {
    return Contact.request('all', function(err, contacts) {
      return async.mapSeries(contacts, function(contact, done) {
        return contact.toVCF(done);
      }, function(err, outputs) {
        var date, day, month, vCardOutput, year;
        if (err != null) {
          return next(err);
        }
        vCardOutput = outputs.join('');
        date = new Date();
        year = date.getYear();
        month = date.getMonth();
        day = date.getDay();
        date = "" + year + "-" + month + "-" + day;
        res.attachment("cozy-contacts-" + date + ".vcf");
        res.set('Content-Type', 'text/x-vcard');
        return res.send(vCardOutput);
      });
    });
  },
  vCardContact: function(req, res, next) {
    return req.contact.toVCF(function(err, vCardOutput) {
      if (err != null) {
        return next(err);
      }
      res.attachment("" + req.params.fn + ".vcf");
      res.set('Content-Type', 'text/x-vcard');
      return res.send(vCardOutput);
    });
  }
};
