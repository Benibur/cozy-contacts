// Generated by CoffeeScript 1.8.0
var File, Photo, async, fileByPage, fs, im, onThumbCreation, resize;

File = require('../models/file');

Photo = require('../models/photo');

async = require('async');

fs = require('fs');

im = require('imagemagick');

onThumbCreation = require('../../init').onThumbCreation;

fileByPage = 5 * 12;

module.exports.fetch = function(req, res, next, id) {
  if (id.indexOf('.jpg') > 0) {
    id = id.substring(0, id.length - 4);
  }
  return File.find(id, (function(_this) {
    return function(err, file) {
      if (err) {
        return res.error(500, 'An error occured', err);
      }
      if (!file) {
        return res.error(404, 'File not found');
      }
      req.file = file;
      return next();
    };
  })(this));
};

module.exports.list = function(req, res, next) {
  var dates, onCreation, options, percent, skip, _ref;
  if (req.params.page != null) {
    skip = parseInt(req.params.page) * fileByPage;
  } else {
    skip = 0;
  }
  _ref = onThumbCreation(), onCreation = _ref[0], percent = _ref[1];
  if (onCreation) {
    return res.send({
      "percent": percent
    });
  } else {
    dates = {};
    options = {
      limit: fileByPage + 1,
      skip: skip,
      descending: true
    };
    return File.imageByDate(options, (function(_this) {
      return function(err, photos) {
        var date, hasNext, mounth, photo, _i, _len;
        if (err) {
          return res.error(500, 'An error occured', err);
        } else {
          if (photos.length === fileByPage + 1) {
            hasNext = true;
          } else {
            hasNext = false;
          }
          photos.splice(fileByPage, 1);
          for (_i = 0, _len = photos.length; _i < _len; _i++) {
            photo = photos[_i];
            date = new Date(photo.lastModification);
            mounth = date.getMonth() + 1;
            mounth = mounth > 9 ? "" + mounth : "0" + mounth;
            date = "" + (date.getFullYear()) + "-" + mounth;
            if (dates[date] != null) {
              dates[date].push(photo);
            } else {
              dates[date] = [photo];
            }
          }
          return res.send({
            files: dates,
            hasNext: hasNext
          }, 200);
        }
      };
    })(this));
  }
};

module.exports.thumb = function(req, res, next) {
  var stream, which;
  console.log('taratata');
  console.log(req.file);
  which = req.file.binary.thumb ? 'thumb' : 'file';
  console.log(which);
  stream = req.file.getBinary(which, function(err) {
    if (err) {
      return next(err);
    }
  });
  return stream.pipe(res);
};

resize = function(raw, photo, name, callback) {
  var options;
  options = name === 'thumb' ? {
    mode: 'crop',
    width: 300,
    height: 300
  } : {
    mode: 'resize',
    width: 1200,
    height: 800
  };
  options.srcPath = raw;
  options.dstPath = "/tmp/" + photo.id + "2";
  return fs.open(options.dstPath, 'w', function(err) {
    if (err) {
      return callback(err);
    } else {
      return im[options.mode](options, function(err, stdout, stderr) {
        if (err) {
          return callback(err);
        }
        return photo.attachBinary(options.dstPath, {
          name: name
        }, function(err) {
          return fs.unlink(options.dstPath, function() {
            return callback(err);
          });
        });
      });
    }
  });
};

module.exports.createPhoto = function(req, res, next) {
  var file, photo;
  file = req.file;
  if (file.binary == null) {
    return next(new Error('no binary'));
  }
  photo = {
    date: file.lastModification,
    title: "",
    description: "",
    orientation: 1,
    albumid: "" + req.body.albumid,
    binary: file.binary
  };
  return Photo.create(photo, function(err, photo) {
    var rawFile, stream;
    if (err) {
      return next(err);
    }
    rawFile = "/tmp/" + photo.id;
    fs.openSync(rawFile, 'w');
    stream = file.getBinary('file', function(err) {
      if (err) {
        return next(err);
      }
    });
    stream.pipe(fs.createWriteStream(rawFile));
    stream.on('error', next);
    return stream.on('end', (function(_this) {
      return function() {
        if (photo.binary.thumb == null) {
          return resize(rawFile, photo, 'thumb', function(err) {
            if (err) {
              return next(err);
            }
            return resize(rawFile, photo, 'screen', function(err) {
              return fs.unlink(rawFile, function() {
                return res.send(201, photo);
              });
            });
          });
        } else {
          return resize(rawFile, photo, 'screen', function(err) {
            return fs.unlink(rawFile, function() {
              return res.send(201, photo);
            });
          });
        }
      };
    })(this));
  });
};
